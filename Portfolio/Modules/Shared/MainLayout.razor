@inherits LayoutComponentBase
@using Microsoft.JSInterop

@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<script>
    function toggleTheme(){
        var body = document.body;
        var theme = body.dataset.bsTheme === 'light' ? 'dark' : 'light';
        body.dataset.bsTheme = theme;

        var iconElementLight = document.getElementById('themeIconLight');
        var iconElementDark = document.getElementById('themeIconDark');

        if (theme === 'light') {
            iconElementDark.style.display = 'inline';
            iconElementLight.style.display = 'none';
        } else {
            iconElementDark.style.display = 'none';
            iconElementLight.style.display = 'inline';
        }

        var backgroundColor = theme === 'light' ? '#FFFFFF' : '#212529';
        document.getElementById("minhaDiv").style.backgroundColor = backgroundColor;
    }
</script>
<div class="page">
    <div class="main">
        <div id="minhaDiv" class="navigation-bar">
            <div class="navigation-title">
                <p class="item-menu-initial">Anderson</p>
            </div>
            <div class="navigation-itens">
                @foreach (var item in menu)
                {
                    if(item.IsSelected)
                    {
                        <p class="item-menu primary-color">@item.Text</p>
                    }
                    else
                    {
                        <p class="item-menu" @onclick="@(() => ToggleNavMenu(item))">@item.Text</p>
                    }
                }
                <div class="item-contact" onclick="toggleTheme()">
                    <i id="themeIconLight" class="bi bi-brightness-high-fill" style="color: #F1BC03;" width="30" alt="Light theme"/>
                    <i id="themeIconDark" class="bi bi-moon-fill" style="color: #F1BC03; display: none;" width="30" alt="Dark theme"/>
                </div>
            </div>
        </div>
        <div class="content px-4">
            @Body
        </div>
    </div>
</div>

@code{

    [Inject]
    private IJSRuntime JSRuntime { get; set; }
    private string currentTheme = "light"; 

    List<Menu> menu = new List<Menu>()
    {
        new Menu(){ Id=1, Text="Home", Page="/"},
        new Menu(){ Id=2, Text="Newsletter", Page="/newsletter"}
    };

    protected override void OnInitialized()
    {
        var relativeUri = new Uri(NavigationManager.Uri).PathAndQuery;

        var selectedMenu = menu
            .FirstOrDefault(menu => menu.Page.Equals(relativeUri, StringComparison.OrdinalIgnoreCase));
        
        if (selectedMenu != null)
            selectedMenu.IsSelected = true;
    }

    private void ToggleNavMenu(Menu item)
    {
        foreach(var items in menu)
            items.IsSelected = false;

        item.IsSelected = true;

        string navigation = string.Empty;
        switch(item.Id) 
        {
            case 1:
                navigation = "/";
                break;
            case 2:
                navigation = "newsletter";
                break;
        }

        NavigationManager.NavigateTo(navigation);
    }

    @* private async Task ToggleTheme()
    {
        // Inverte o tema atual
        currentTheme = currentTheme == "light" ? "dark" : "light";

        // Atualiza o tema diretamente no DOM usando IJSRuntime
        await JSRuntime.InvokeVoidAsync("toggleTheme", currentTheme);
    } *@
}
